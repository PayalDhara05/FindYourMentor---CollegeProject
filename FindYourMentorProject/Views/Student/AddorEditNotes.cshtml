@model FindYourMentorProject.Models.AddNotesMentee

<div class="notes-container">
    @using (Html.BeginForm("AddorEditNotes", "Student", FormMethod.Post, new { onSubmit = "return SubmitForm(this)", @id = "notes-form" }))
    {
        @Html.AntiForgeryToken();
        <input data-val="true" data-val-number="The field NoteID must be a number." data-val-required="The NoteID field is required." id="NoteID" name="NoteID" type="hidden" value="@Model.NoteID">

        <div class="notes-caption">
            <label class="form-label" for="Title">Title</label>
        </div>
        <div class="notes-data">
            @Html.EditorFor(m => m.Title, Model.Title, new { HtmlAttributes = new { @placeholder = "Give a title" } })
            @Html.ValidationMessageFor(m => m.Title,"",new { @class = "text-danger" })
        </div>

        <div class="notes-caption">
            <label class="form-label" for="Description" id="Desc">Description</label>
        </div>
        <div class="notes-data">
            @Html.EditorFor(m => m.Description, Model.Description, new { HtmlAttributes = new { @placeholder = "Give a Description" } })
            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
        </div>

        <div class="form-btns">
            <input type="submit" value="Done" class="btn-success">
            <input type="button" value="Reset" onclick="callReset(form);" class="btn-reset">
        </div>
    }
    </div>

<script>
    function callReset(form)
    {
        alert("inside reset");
        let noteform = document.getElementById("notes-form");
        noteform.elements['Title'].value = '';
        noteform.elements['Description'].value = '';
    }
</script>